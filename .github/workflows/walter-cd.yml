# This file is maintained by Walter CI, and may be rewritten.
# https://github.com/piotr-yuxuan/walter-ci
#
# You are free to remove this project from Walter CI realm by opening
# a PR. You may also create another workflow besides this one.

name: Walter CD
'on':
  repository_dispatch: null
  workflow_dispatch:
    inputs:
      walter-version:
        description: Walter bin version
        required: false
        type: string
      version-to-release:
        description: Version to release
        required: false
        type: string
  push:
    branches: '*'
env:
  GIT_ASKPASS: ${HOME}/.walter-ci/bin/askpass.sh
  GIT_AUTHOR_EMAIL: ${{ secrets.WALTER_GIT_EMAIL }}
  GIT_AUTHOR_NAME: ${{ secrets.WALTER_AUTHOR_NAME }}
  GIT_COMMITTER_EMAIL: ${{ secrets.WALTER_GIT_EMAIL }}
  GIT_COMMITTER_NAME: ${{ secrets.WALTER_AUTHOR_NAME }}
  GIT_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  VERSION_TO_RELEASE: ${{ github.event.inputs.version-to-release }}
  WALTER_ACTOR: ${{ secrets.WALTER_ACTOR }}
  WALTER_CLOJARS_PASSWORD: ${{ secrets.WALTER_CLOJARS_PASSWORD }}
  WALTER_CLOJARS_USERNAME: ${{ secrets.WALTER_CLOJARS_USERNAME }}
  WALTER_GITHUB_PASSWORD: ${{ secrets.WALTER_GITHUB_PASSWORD }}
  WALTER_VERSION: ${{ github.event.inputs.walter-version }}
jobs:
  run-tests:
    runs-on: ubuntu-latest
    name: Run tests
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - run: lein with-profile +walter/kaocha,+kaocha run -m kaocha.runner --skip-meta :slow --skip-meta :perf
  security-nvd:
    runs-on: ubuntu-latest
    name: Clojure nvd vulnerabilities
    if: ${{ github.event.inputs.version-to-release == '' }}
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - uses: actions/cache@8f1e2e02865c42348f9baddbbaafb1841dce610a
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-nvd-${{ hashFiles('**/project.clj') }}
        restore-keys: ${{ runner.os }}-maven-
    - run: git rm "./doc/Known vulnerabilities.txt"
      continue-on-error: true
    - run: clojure -Ttools install nvd-clojure/nvd-clojure '{:mvn/version "RELEASE"}' :as nvd
    - run: clojure -Tnvd nvd.task/check :classpath '"'"$(lein with-profile -user,-dev classpath)"'"'
      continue-on-error: true
    - run: bb "$HOME/.walter-ci/cut-nvd.clj" ./target/nvd/dependency-check-report.csv
      continue-on-error: true
    - run: cp ./target/nvd/dependency-check-report.csv ./doc/known-vulnerabilities.csv
    - run: git add ./doc/known-vulnerabilities.csv
    - run: git diff --staged --exit-code
      continue-on-error: true
      id: diff
    - run: git commit --message "Update known vulnerabilities"
      if: steps.diff.outcome == 'failure'
    - name: git push
      run: walter retry
      if: steps.diff.outcome == 'failure'
      env:
        WALTER_TRY: git push
        WALTER_BEFORE_RETRY: git pull --rebase
  security-sarif-clojure:
    runs-on: ubuntu-latest
    name: Clojure clj-holmes vulnerabilities
    if: ${{ github.event.inputs.version-to-release == '' }}
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - uses: clj-holmes/clj-holmes-action@200d2d03900917d7eb3c24fc691ab83579a87fcb
      with:
        output-type: sarif
        output-file: tfsec.sarif
        fail-on-result: 'false'
    - name: Upload analysis results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: tfsec.sarif
        wait-for-processing: true
  security-sarif-terraform:
    runs-on: ubuntu-latest
    name: Terraform tfsec vulnerabilities
    if: ${{ github.event.inputs.version-to-release == '' }}
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - uses: aquasecurity/tfsec-sarif-action@9b703869c5108700605056134506e274ef6e9bd3
      with:
        sarif_file: tfsec.sarif
    - name: Upload analysis results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: tfsec.sarif
        wait-for-processing: true
  list-licenses:
    runs-on: ubuntu-latest
    name: List dependency licenses
    if: ${{ github.event.inputs.version-to-release == '' }}
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - run: lein licenses :csv > ./doc/Licenses.csv
    - run: sort -o ./doc/Licenses.csv{,}
    - run: awk -i inplace 'BEGINFILE{print "Library name,Version,License name"}{print}' ./doc/Licenses.csv
    - run: git add ./doc/Licenses.csv
    - run: git diff --staged --exit-code
      continue-on-error: true
      id: diff
    - run: git commit --message "List dependency licenses"
      if: steps.diff.outcome == 'failure'
    - name: git push
      run: walter retry
      if: steps.diff.outcome == 'failure'
      env:
        WALTER_TRY: git push
        WALTER_BEFORE_RETRY: git pull --rebase
  build-artifacts:
    runs-on: ubuntu-latest
    name: Build artifacts
    if: ${{ github.event.inputs.version-to-release != '' }}
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - name: Set project version to ${{ github.event.inputs.version-to-release }}
      run: |-
        VERSION_FILE=$(ls resources/*.version)
        echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}
        git add ${VERSION_FILE}
    - run: lein uberjar
    - uses: actions/upload-artifact@v3
      if: ${{ github.event.inputs.version-to-release != '' }}
      with:
        name: jars
        path: target/*.jar
  release-artifacts:
    runs-on: ubuntu-latest
    name: Release artifacts
    if: ${{ github.event.inputs.version-to-release != '' }}
    needs:
    - run-tests
    - build-artifacts
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - name: Set project version to ${{ github.event.inputs.version-to-release }}
      run: |-
        VERSION_FILE=$(ls resources/*.version)
        echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}
        git add ${VERSION_FILE}
    - name: Retrieve artifacts
      uses: actions/download-artifact@v3
      if: ${{ github.event.inputs.version-to-release != '' }}
      with:
        name: jars
        path: target
    - run: tree -L 1 -Chup ./target
    - run: git diff --staged --exit-code
      continue-on-error: true
      id: diff
    - run: git commit -m "Version ${VERSION_TO_RELEASE}" -m "[skip ci]"
      if: steps.diff.outcome == 'failure'
    - run: git tag -a ${VERSION_TO_RELEASE} -m "Version ${VERSION_TO_RELEASE}"
      if: steps.diff.outcome == 'failure'
    - run: git push --follow-tags
      if: steps.diff.outcome == 'failure'
    - uses: softprops/action-gh-release@fe9a9bd3295828558c7a3c004f23f3bf77d155b2
      with:
        generate_release_notes: true
        tag_name: ${{ github.event.inputs.version-to-release }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        files: target/*-standalone.jar
    - name: Deploy on Clojars?
      id: target-clojars
      run: lein pprint :deploy-repositories | bb --stream -I --eval '(System/exit (if (contains? (into {} *input*) (first *command-line-args*)) 0 1))' "clojars"
      continue-on-error: true
    - name: lein deploy clojars
      if: steps.target-clojars.outcome == 'success'
      run: walter retry
      env:
        WALTER_TRY: lein deploy clojars
    - name: Deploy on GitHub?
      id: target-github
      run: lein pprint :deploy-repositories | bb --stream -I --eval '(System/exit (if (contains? (into {} *input*) (first *command-line-args*)) 0 1))' "github"
      continue-on-error: true
    - name: lein deploy github
      if: steps.target-github.outcome == 'success'
      run: walter retry
      env:
        WALTER_TRY: lein deploy github
    - name: Build cljdoc ahead of the first visitor
      run: |-
        curl 'https://cljdoc.org/api/request-build2' \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        -H 'Origin: https://cljdoc.org' \
        -H 'Referer: https://cljdoc.org/d/com.github.piotr-yuxuan/walter-ci/${VERSION_TO_RELEASE}' \
        --data-raw 'project=com.github.piotr-yuxuan%2Fwalter-ci&version=${VERSION_TO_RELEASE}'
