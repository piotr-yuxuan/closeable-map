# This file is maintained by Walter CI, and may be rewritten.
# https://github.com/piotr-yuxuan/walter-ci
#
# You are free to remove this project from Walter CI realm by opening
# a PR. You may also create another workflow besides this one.

name: Walter CD
'on':
  repository_dispatch: null
  workflow_dispatch:
    inputs:
      walter-version:
        description: Walter bin version
        required: false
        type: string
      version-to-release:
        description: Version to release
        required: false
        type: string
  push:
    branches: '**'
env:
  GIT_ASKPASS: ${HOME}/.walter-ci/bin/askpass.sh
  GIT_AUTHOR_EMAIL: ${{ secrets.WALTER_GIT_EMAIL }}
  GIT_AUTHOR_NAME: ${{ secrets.WALTER_AUTHOR_NAME }}
  GIT_COMMITTER_EMAIL: ${{ secrets.WALTER_GIT_EMAIL }}
  GIT_COMMITTER_NAME: ${{ secrets.WALTER_AUTHOR_NAME }}
  GIT_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  VERSION_TO_RELEASE: ${{ github.event.inputs.version-to-release }}
  WALTER_ACTOR: ${{ secrets.WALTER_ACTOR }}
  WALTER_CLOJARS_PASSWORD: ${{ secrets.WALTER_CLOJARS_PASSWORD }}
  WALTER_CLOJARS_USERNAME: ${{ secrets.WALTER_CLOJARS_USERNAME }}
  WALTER_GITHUB_PASSWORD: ${{ secrets.WALTER_GITHUB_PASSWORD }}
  WALTER_VERSION: ${{ github.event.inputs.walter-version }}
jobs:
  run-tests:
    runs-on: ubuntu-latest
    name: Run tests
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - run: lein with-profile +walter/kaocha,+kaocha run -m kaocha.runner --skip-meta :slow --skip-meta :perf
  build-artifacts:
    runs-on: ubuntu-latest
    name: Build artifacts
    if: ${{ github.event.inputs.version-to-release != '' }}
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - name: Set project version to ${{ github.event.inputs.version-to-release }}
      run: |-
        VERSION_FILE=$(ls resources/*.version)
        echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}
        git add ${VERSION_FILE}
    - run: lein uberjar
    - run: lein with-profile uberjar pom
    - uses: actions/upload-artifact@v3
      with:
        name: jars
        path: |-
          target/**.jar
          pom.xml
  release-artifacts:
    runs-on: ubuntu-latest
    name: Release artifacts
    if: ${{ github.event.inputs.version-to-release != '' }}
    needs:
    - run-tests
    - build-artifacts
    steps:
    - uses: piotr-yuxuan/walter-ci@main
    - name: Set project version to ${{ github.event.inputs.version-to-release }}
      run: |-
        VERSION_FILE=$(ls resources/*.version)
        echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}
        git add ${VERSION_FILE}
    - name: Retrieve artifacts
      uses: actions/download-artifact@v3
      if: ${{ github.event.inputs.version-to-release != '' }}
      with:
        name: jars
        path: .
    - run: git diff --staged --exit-code
      continue-on-error: true
      id: diff
    - run: git commit -m "Version ${VERSION_TO_RELEASE}" -m "[skip ci]"
      if: steps.diff.outcome == 'failure'
    - run: git tag -a ${VERSION_TO_RELEASE} -m "Version ${VERSION_TO_RELEASE}"
      if: steps.diff.outcome == 'failure'
    - run: git push --follow-tags
      if: steps.diff.outcome == 'failure'
    - run: tree -Chup .
    - uses: softprops/action-gh-release@fe9a9bd3295828558c7a3c004f23f3bf77d155b2
      with:
        generate_release_notes: true
        tag_name: ${{ github.event.inputs.version-to-release }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: true
        files: ./target/**-standalone.jar
    - name: Deploy on Clojars?
      id: target-clojars
      run: lein pprint :deploy-repositories | bb --stream -I --eval '(System/exit (if (contains? (into {} *input*) (first *command-line-args*)) 0 1))' "clojars"
      continue-on-error: true
    - name: lein deploy clojars
      if: steps.target-clojars.outcome == 'success'
      run: walter retry
      env:
        WALTER_TRY: lein deploy clojars
    - name: Deploy on GitHub?
      id: target-github
      run: lein pprint :deploy-repositories | bb --stream -I --eval '(System/exit (if (contains? (into {} *input*) (first *command-line-args*)) 0 1))' "github"
      continue-on-error: true
    - name: lein deploy github
      if: steps.target-github.outcome == 'success'
      run: walter retry
      env:
        WALTER_TRY: lein deploy github
    - name: Build cljdoc ahead of the first visitor
      run: |-
        curl 'https://cljdoc.org/api/request-build2' \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        -H 'Origin: https://cljdoc.org' \
        -H 'Referer: https://cljdoc.org/d/com.github.piotr-yuxuan/walter-ci/${VERSION_TO_RELEASE}' \
        --data-raw 'project=com.github.piotr-yuxuan%2Fwalter-ci&version=${VERSION_TO_RELEASE}'
